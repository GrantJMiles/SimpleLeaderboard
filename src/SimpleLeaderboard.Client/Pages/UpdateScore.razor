@page "/postscore/{EventGuid}"
@page "/postscore/{EventGuid}/{LeaderboardGuid}"
<h1>Update Score</h1>
<h5>@EventAdminGuid</h5>
<div class="row">
            <div class="col-12 col-sm-10 offset-sm-1 col-md-8 offset-md-2 col-lg-6 offset-lg-3 text-center">
                @if(string.IsNullOrWhiteSpace(EventGuid) || _event == null) {
                    <h1>No Event Found!</h1>
                } else if (_event.AdminId != EventGuid) 
                {
                    <h1 class="text-danger">Not Authorised</h1>
                } 
                else {
                    <h1>@_event?.Title</h1>
                    <h5>@_event?.Description</h5>
                    <h5 class="text-warning">@_message</h5>
                    <select class="form-control" @onchange="ChangeLeaderboard" >
                        <option value="">Select a leaderboard</option>
                        @foreach (var l in _leaderboards ?? new List<LeaderboardDto>())
                        {
                            <option selected='@(l.UniqueId == LeaderboardGuid ? "selected" : null)' value="@l.UniqueId">@l.Title</option>
                        }
                    </select>

                    @if(string.IsNullOrWhiteSpace(LeaderboardGuid)) {
                        <p>Please select a leaderboard!</p>
                    } else {
                        var selected = _leaderboards?.FirstOrDefault(f => f.UniqueId == LeaderboardGuid);
                        @if(selected == null){<p>Unable to load leaderboard</p>}
                        else {
                            @if (selected.LeaderboardPlayers != null)
                            {
                                <select class="form-control" @bind="_selectedPlayerId">
                                    <option value="0">Select a player</option>
                                    @foreach (var pl in selected.LeaderboardPlayers ?? new List<LeaderboardPlayerDto>())
                                    {
                                        <option @key="@pl.LeaderboardPlayerId" value="@pl.LeaderboardPlayerId">@pl.Name (@pl.Nickname)</option>
                                    }
                                </select>
                                _selectedPlayer = selected.LeaderboardPlayers.FirstOrDefault(f => f.LeaderboardPlayerId == _selectedPlayerId);
                                @if(_selectedPlayer != null) {
                                    <form class="form-inline my-3">
                                        <div class="form-group">    
                                            <label for="score" class="control-label">@_selectedPlayer.Name</label>
                                            <input type="number" id="score" min="0" @bind="@_selectedPlayer.Score" class="form-control">
                                            <button type="button" class="btn btn-outline-success" @onclick="(async () => {await UpdateScores(_selectedPlayer, selected.LeaderboardId);})">Save</button>
                                        </div>
                                    </form>
                                } else {
                                    <p>Select a player to update teh score</p>
                                }
                            }

                        }
                    }
                }  
            </div>
    </div>

    @code {
        [Parameter]
        public string EventGuid { get; set; }
        [Parameter]
        public string LeaderboardGuid { get; set; }
        [Parameter]
        public string EventAdminGuid { get; set; }
        [Inject]
        public HttpClient _http { get; set; }
        [Inject]
        public NavigationManager Nav { get; set; }

        private LeaderboardEventDto _event;
        private IEnumerable<LeaderboardDto> _leaderboards;
        private LeaderboardPlayerDto _selectedPlayer;
        private int _selectedPlayerId;
        private string _message;

        public async override Task SetParametersAsync(ParameterView parameters)
        {
            await base.SetParametersAsync(parameters);
            if(!string.IsNullOrWhiteSpace(EventGuid)) {
                var events = await _http.GetFromJsonAsync<IEnumerable<LeaderboardEventDto>>($"event?eventGuid={EventGuid}");
                _event = events.FirstOrDefault();
                var leaderboards = await _http.GetFromJsonAsync<IEnumerable<LeaderboardDto>>($"leaderboards/{EventGuid}");
                _leaderboards = leaderboards;
                StateHasChanged();
            }
        }

        private void ChangeLeaderboard(ChangeEventArgs changeEvent)
        {
            Nav.NavigateTo($"/postscore/{EventGuid}/{changeEvent.Value}");
        }
        private async Task UpdateScores(LeaderboardPlayerDto player, int leaderboardId) 
        {
            _message = "";
            var put = await _http.PutAsJsonAsync<LeaderboardPlayerDto>($"player?leaderboardId={leaderboardId}&playerId={player.LeaderboardPlayerId}&playerScore={player.Score}", player);
            _message = $"{player.Name}'s score of {player.Score} was {(put.IsSuccessStatusCode ? "Successful" : "Failed")}";
        }
    }
